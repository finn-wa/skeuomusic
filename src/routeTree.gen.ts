/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as PlayerImport } from './routes/player'
import { Route as IndexImport } from './routes/index'
import { Route as RedirectSpotifyImport } from './routes/redirect.spotify'
import { Route as PlayerSongsImport } from './routes/player.songs'
import { Route as PlayerPlaylistsImport } from './routes/player.playlists'
import { Route as PlayerMoreImport } from './routes/player.more'
import { Route as PlayerArtistsImport } from './routes/player.artists'
import { Route as PlayerAlbumsImport } from './routes/player.albums'
import { Route as ApiSpotifyAuthImport } from './routes/api/spotify/auth'

// Create/Update Routes

const PlayerRoute = PlayerImport.update({
  id: '/player',
  path: '/player',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const RedirectSpotifyRoute = RedirectSpotifyImport.update({
  id: '/redirect/spotify',
  path: '/redirect/spotify',
  getParentRoute: () => rootRoute,
} as any)

const PlayerSongsRoute = PlayerSongsImport.update({
  id: '/songs',
  path: '/songs',
  getParentRoute: () => PlayerRoute,
} as any)

const PlayerPlaylistsRoute = PlayerPlaylistsImport.update({
  id: '/playlists',
  path: '/playlists',
  getParentRoute: () => PlayerRoute,
} as any)

const PlayerMoreRoute = PlayerMoreImport.update({
  id: '/more',
  path: '/more',
  getParentRoute: () => PlayerRoute,
} as any)

const PlayerArtistsRoute = PlayerArtistsImport.update({
  id: '/artists',
  path: '/artists',
  getParentRoute: () => PlayerRoute,
} as any)

const PlayerAlbumsRoute = PlayerAlbumsImport.update({
  id: '/albums',
  path: '/albums',
  getParentRoute: () => PlayerRoute,
} as any)

const ApiSpotifyAuthRoute = ApiSpotifyAuthImport.update({
  id: '/api/spotify/auth',
  path: '/api/spotify/auth',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/solid-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/player': {
      id: '/player'
      path: '/player'
      fullPath: '/player'
      preLoaderRoute: typeof PlayerImport
      parentRoute: typeof rootRoute
    }
    '/player/albums': {
      id: '/player/albums'
      path: '/albums'
      fullPath: '/player/albums'
      preLoaderRoute: typeof PlayerAlbumsImport
      parentRoute: typeof PlayerImport
    }
    '/player/artists': {
      id: '/player/artists'
      path: '/artists'
      fullPath: '/player/artists'
      preLoaderRoute: typeof PlayerArtistsImport
      parentRoute: typeof PlayerImport
    }
    '/player/more': {
      id: '/player/more'
      path: '/more'
      fullPath: '/player/more'
      preLoaderRoute: typeof PlayerMoreImport
      parentRoute: typeof PlayerImport
    }
    '/player/playlists': {
      id: '/player/playlists'
      path: '/playlists'
      fullPath: '/player/playlists'
      preLoaderRoute: typeof PlayerPlaylistsImport
      parentRoute: typeof PlayerImport
    }
    '/player/songs': {
      id: '/player/songs'
      path: '/songs'
      fullPath: '/player/songs'
      preLoaderRoute: typeof PlayerSongsImport
      parentRoute: typeof PlayerImport
    }
    '/redirect/spotify': {
      id: '/redirect/spotify'
      path: '/redirect/spotify'
      fullPath: '/redirect/spotify'
      preLoaderRoute: typeof RedirectSpotifyImport
      parentRoute: typeof rootRoute
    }
    '/api/spotify/auth': {
      id: '/api/spotify/auth'
      path: '/api/spotify/auth'
      fullPath: '/api/spotify/auth'
      preLoaderRoute: typeof ApiSpotifyAuthImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

interface PlayerRouteChildren {
  PlayerAlbumsRoute: typeof PlayerAlbumsRoute
  PlayerArtistsRoute: typeof PlayerArtistsRoute
  PlayerMoreRoute: typeof PlayerMoreRoute
  PlayerPlaylistsRoute: typeof PlayerPlaylistsRoute
  PlayerSongsRoute: typeof PlayerSongsRoute
}

const PlayerRouteChildren: PlayerRouteChildren = {
  PlayerAlbumsRoute: PlayerAlbumsRoute,
  PlayerArtistsRoute: PlayerArtistsRoute,
  PlayerMoreRoute: PlayerMoreRoute,
  PlayerPlaylistsRoute: PlayerPlaylistsRoute,
  PlayerSongsRoute: PlayerSongsRoute,
}

const PlayerRouteWithChildren =
  PlayerRoute._addFileChildren(PlayerRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/player': typeof PlayerRouteWithChildren
  '/player/albums': typeof PlayerAlbumsRoute
  '/player/artists': typeof PlayerArtistsRoute
  '/player/more': typeof PlayerMoreRoute
  '/player/playlists': typeof PlayerPlaylistsRoute
  '/player/songs': typeof PlayerSongsRoute
  '/redirect/spotify': typeof RedirectSpotifyRoute
  '/api/spotify/auth': typeof ApiSpotifyAuthRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/player': typeof PlayerRouteWithChildren
  '/player/albums': typeof PlayerAlbumsRoute
  '/player/artists': typeof PlayerArtistsRoute
  '/player/more': typeof PlayerMoreRoute
  '/player/playlists': typeof PlayerPlaylistsRoute
  '/player/songs': typeof PlayerSongsRoute
  '/redirect/spotify': typeof RedirectSpotifyRoute
  '/api/spotify/auth': typeof ApiSpotifyAuthRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/player': typeof PlayerRouteWithChildren
  '/player/albums': typeof PlayerAlbumsRoute
  '/player/artists': typeof PlayerArtistsRoute
  '/player/more': typeof PlayerMoreRoute
  '/player/playlists': typeof PlayerPlaylistsRoute
  '/player/songs': typeof PlayerSongsRoute
  '/redirect/spotify': typeof RedirectSpotifyRoute
  '/api/spotify/auth': typeof ApiSpotifyAuthRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/player'
    | '/player/albums'
    | '/player/artists'
    | '/player/more'
    | '/player/playlists'
    | '/player/songs'
    | '/redirect/spotify'
    | '/api/spotify/auth'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/player'
    | '/player/albums'
    | '/player/artists'
    | '/player/more'
    | '/player/playlists'
    | '/player/songs'
    | '/redirect/spotify'
    | '/api/spotify/auth'
  id:
    | '__root__'
    | '/'
    | '/player'
    | '/player/albums'
    | '/player/artists'
    | '/player/more'
    | '/player/playlists'
    | '/player/songs'
    | '/redirect/spotify'
    | '/api/spotify/auth'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  PlayerRoute: typeof PlayerRouteWithChildren
  RedirectSpotifyRoute: typeof RedirectSpotifyRoute
  ApiSpotifyAuthRoute: typeof ApiSpotifyAuthRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  PlayerRoute: PlayerRouteWithChildren,
  RedirectSpotifyRoute: RedirectSpotifyRoute,
  ApiSpotifyAuthRoute: ApiSpotifyAuthRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/player",
        "/redirect/spotify",
        "/api/spotify/auth"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/player": {
      "filePath": "player.tsx",
      "children": [
        "/player/albums",
        "/player/artists",
        "/player/more",
        "/player/playlists",
        "/player/songs"
      ]
    },
    "/player/albums": {
      "filePath": "player.albums.tsx",
      "parent": "/player"
    },
    "/player/artists": {
      "filePath": "player.artists.tsx",
      "parent": "/player"
    },
    "/player/more": {
      "filePath": "player.more.tsx",
      "parent": "/player"
    },
    "/player/playlists": {
      "filePath": "player.playlists.tsx",
      "parent": "/player"
    },
    "/player/songs": {
      "filePath": "player.songs.tsx",
      "parent": "/player"
    },
    "/redirect/spotify": {
      "filePath": "redirect.spotify.tsx"
    },
    "/api/spotify/auth": {
      "filePath": "api/spotify/auth.ts"
    }
  }
}
ROUTE_MANIFEST_END */
