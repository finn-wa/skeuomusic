/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/solid-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as PlayerRouteImport } from './routes/player'
import { Route as IndexRouteImport } from './routes/index'
import { Route as RedirectSpotifyRouteImport } from './routes/redirect.spotify'
import { Route as PlayerSongsRouteImport } from './routes/player.songs'
import { Route as PlayerPlaylistsRouteImport } from './routes/player.playlists'
import { Route as PlayerMoreRouteImport } from './routes/player.more'
import { Route as PlayerArtistsRouteImport } from './routes/player.artists'
import { Route as PlayerAlbumsRouteImport } from './routes/player.albums'
import { Route as PlayerArtistsArtistIdRouteImport } from './routes/player.artists_.$artistId'
import { ServerRoute as ApiSpotifyAuthServerRouteImport } from './routes/api/spotify/auth'

const rootServerRouteImport = createServerRootRoute()

const PlayerRoute = PlayerRouteImport.update({
  id: '/player',
  path: '/player',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const RedirectSpotifyRoute = RedirectSpotifyRouteImport.update({
  id: '/redirect/spotify',
  path: '/redirect/spotify',
  getParentRoute: () => rootRouteImport,
} as any)
const PlayerSongsRoute = PlayerSongsRouteImport.update({
  id: '/songs',
  path: '/songs',
  getParentRoute: () => PlayerRoute,
} as any)
const PlayerPlaylistsRoute = PlayerPlaylistsRouteImport.update({
  id: '/playlists',
  path: '/playlists',
  getParentRoute: () => PlayerRoute,
} as any)
const PlayerMoreRoute = PlayerMoreRouteImport.update({
  id: '/more',
  path: '/more',
  getParentRoute: () => PlayerRoute,
} as any)
const PlayerArtistsRoute = PlayerArtistsRouteImport.update({
  id: '/artists',
  path: '/artists',
  getParentRoute: () => PlayerRoute,
} as any)
const PlayerAlbumsRoute = PlayerAlbumsRouteImport.update({
  id: '/albums',
  path: '/albums',
  getParentRoute: () => PlayerRoute,
} as any)
const PlayerArtistsArtistIdRoute = PlayerArtistsArtistIdRouteImport.update({
  id: '/artists_/$artistId',
  path: '/artists/$artistId',
  getParentRoute: () => PlayerRoute,
} as any)
const ApiSpotifyAuthServerRoute = ApiSpotifyAuthServerRouteImport.update({
  id: '/api/spotify/auth',
  path: '/api/spotify/auth',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/player': typeof PlayerRouteWithChildren
  '/player/albums': typeof PlayerAlbumsRoute
  '/player/artists': typeof PlayerArtistsRoute
  '/player/more': typeof PlayerMoreRoute
  '/player/playlists': typeof PlayerPlaylistsRoute
  '/player/songs': typeof PlayerSongsRoute
  '/redirect/spotify': typeof RedirectSpotifyRoute
  '/player/artists/$artistId': typeof PlayerArtistsArtistIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/player': typeof PlayerRouteWithChildren
  '/player/albums': typeof PlayerAlbumsRoute
  '/player/artists': typeof PlayerArtistsRoute
  '/player/more': typeof PlayerMoreRoute
  '/player/playlists': typeof PlayerPlaylistsRoute
  '/player/songs': typeof PlayerSongsRoute
  '/redirect/spotify': typeof RedirectSpotifyRoute
  '/player/artists/$artistId': typeof PlayerArtistsArtistIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/player': typeof PlayerRouteWithChildren
  '/player/albums': typeof PlayerAlbumsRoute
  '/player/artists': typeof PlayerArtistsRoute
  '/player/more': typeof PlayerMoreRoute
  '/player/playlists': typeof PlayerPlaylistsRoute
  '/player/songs': typeof PlayerSongsRoute
  '/redirect/spotify': typeof RedirectSpotifyRoute
  '/player/artists_/$artistId': typeof PlayerArtistsArtistIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/player'
    | '/player/albums'
    | '/player/artists'
    | '/player/more'
    | '/player/playlists'
    | '/player/songs'
    | '/redirect/spotify'
    | '/player/artists/$artistId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/player'
    | '/player/albums'
    | '/player/artists'
    | '/player/more'
    | '/player/playlists'
    | '/player/songs'
    | '/redirect/spotify'
    | '/player/artists/$artistId'
  id:
    | '__root__'
    | '/'
    | '/player'
    | '/player/albums'
    | '/player/artists'
    | '/player/more'
    | '/player/playlists'
    | '/player/songs'
    | '/redirect/spotify'
    | '/player/artists_/$artistId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  PlayerRoute: typeof PlayerRouteWithChildren
  RedirectSpotifyRoute: typeof RedirectSpotifyRoute
}
export interface FileServerRoutesByFullPath {
  '/api/spotify/auth': typeof ApiSpotifyAuthServerRoute
}
export interface FileServerRoutesByTo {
  '/api/spotify/auth': typeof ApiSpotifyAuthServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/spotify/auth': typeof ApiSpotifyAuthServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/api/spotify/auth'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/api/spotify/auth'
  id: '__root__' | '/api/spotify/auth'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiSpotifyAuthServerRoute: typeof ApiSpotifyAuthServerRoute
}

declare module '@tanstack/solid-router' {
  interface FileRoutesByPath {
    '/player': {
      id: '/player'
      path: '/player'
      fullPath: '/player'
      preLoaderRoute: typeof PlayerRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/redirect/spotify': {
      id: '/redirect/spotify'
      path: '/redirect/spotify'
      fullPath: '/redirect/spotify'
      preLoaderRoute: typeof RedirectSpotifyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/player/songs': {
      id: '/player/songs'
      path: '/songs'
      fullPath: '/player/songs'
      preLoaderRoute: typeof PlayerSongsRouteImport
      parentRoute: typeof PlayerRoute
    }
    '/player/playlists': {
      id: '/player/playlists'
      path: '/playlists'
      fullPath: '/player/playlists'
      preLoaderRoute: typeof PlayerPlaylistsRouteImport
      parentRoute: typeof PlayerRoute
    }
    '/player/more': {
      id: '/player/more'
      path: '/more'
      fullPath: '/player/more'
      preLoaderRoute: typeof PlayerMoreRouteImport
      parentRoute: typeof PlayerRoute
    }
    '/player/artists': {
      id: '/player/artists'
      path: '/artists'
      fullPath: '/player/artists'
      preLoaderRoute: typeof PlayerArtistsRouteImport
      parentRoute: typeof PlayerRoute
    }
    '/player/albums': {
      id: '/player/albums'
      path: '/albums'
      fullPath: '/player/albums'
      preLoaderRoute: typeof PlayerAlbumsRouteImport
      parentRoute: typeof PlayerRoute
    }
    '/player/artists_/$artistId': {
      id: '/player/artists_/$artistId'
      path: '/artists/$artistId'
      fullPath: '/player/artists/$artistId'
      preLoaderRoute: typeof PlayerArtistsArtistIdRouteImport
      parentRoute: typeof PlayerRoute
    }
  }
}
declare module '@tanstack/solid-start/server' {
  interface ServerFileRoutesByPath {
    '/api/spotify/auth': {
      id: '/api/spotify/auth'
      path: '/api/spotify/auth'
      fullPath: '/api/spotify/auth'
      preLoaderRoute: typeof ApiSpotifyAuthServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

interface PlayerRouteChildren {
  PlayerAlbumsRoute: typeof PlayerAlbumsRoute
  PlayerArtistsRoute: typeof PlayerArtistsRoute
  PlayerMoreRoute: typeof PlayerMoreRoute
  PlayerPlaylistsRoute: typeof PlayerPlaylistsRoute
  PlayerSongsRoute: typeof PlayerSongsRoute
  PlayerArtistsArtistIdRoute: typeof PlayerArtistsArtistIdRoute
}

const PlayerRouteChildren: PlayerRouteChildren = {
  PlayerAlbumsRoute: PlayerAlbumsRoute,
  PlayerArtistsRoute: PlayerArtistsRoute,
  PlayerMoreRoute: PlayerMoreRoute,
  PlayerPlaylistsRoute: PlayerPlaylistsRoute,
  PlayerSongsRoute: PlayerSongsRoute,
  PlayerArtistsArtistIdRoute: PlayerArtistsArtistIdRoute,
}

const PlayerRouteWithChildren =
  PlayerRoute._addFileChildren(PlayerRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  PlayerRoute: PlayerRouteWithChildren,
  RedirectSpotifyRoute: RedirectSpotifyRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiSpotifyAuthServerRoute: ApiSpotifyAuthServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
